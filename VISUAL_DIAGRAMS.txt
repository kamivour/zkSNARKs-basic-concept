╔═══════════════════════════════════════════════════════════════════════════╗
║                    zkSNARKs VISUAL ARCHITECTURE                           ║
╚═══════════════════════════════════════════════════════════════════════════╝

┌───────────────────────────────────────────────────────────────────────────┐
│                          HIGH-LEVEL COMPUTATION                           │
│                                                                           │
│                       "Prove x³ + x + 5 = 35"                            │
│                       (without revealing x)                               │
└─────────────────────────────────┬─────────────────────────────────────────┘
                                  │
                                  ▼
┌───────────────────────────────────────────────────────────────────────────┐
│                           STEP 1: FLATTENING                              │
│                                                                           │
│   High-level → Basic Operations:                                         │
│   ────────────────────────────────                                       │
│   x³ + x + 5 = 35                                                        │
│       ↓                                                                   │
│   v₁ = x * x          (compute x²)                                       │
│   v₂ = v₁ * x         (compute x³)                                       │
│   out = v₂ + x + 5    (compute result)                                   │
└─────────────────────────────────┬─────────────────────────────────────────┘
                                  │
                                  ▼
┌───────────────────────────────────────────────────────────────────────────┐
│                        STEP 2: R1CS (Constraints)                         │
│                                                                           │
│   Witness: [one, x, out, v₁, v₂] = [1, 3, 35, 9, 27]                   │
│                                                                           │
│   ┌─────────────────────────────────────────────────────────────────┐   │
│   │ Constraint 0: x * x = v₁                                        │   │
│   │   A·witness = 3                                                 │   │
│   │   B·witness = 3                                                 │   │
│   │   C·witness = 9                                                 │   │
│   │   Check: 3 * 3 = 9 ✓                                           │   │
│   └─────────────────────────────────────────────────────────────────┘   │
│                                                                           │
│   ┌─────────────────────────────────────────────────────────────────┐   │
│   │ Constraint 1: v₁ * x = v₂                                      │   │
│   │   A·witness = 9                                                 │   │
│   │   B·witness = 3                                                 │   │
│   │   C·witness = 27                                                │   │
│   │   Check: 9 * 3 = 27 ✓                                          │   │
│   └─────────────────────────────────────────────────────────────────┘   │
│                                                                           │
│   ┌─────────────────────────────────────────────────────────────────┐   │
│   │ Constraint 2: (v₂ + x + 5) * 1 = out                           │   │
│   │   A·witness = 35                                                │   │
│   │   B·witness = 1                                                 │   │
│   │   C·witness = 35                                                │   │
│   │   Check: 35 * 1 = 35 ✓                                         │   │
│   └─────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────┬─────────────────────────────────────────┘
                                  │
                                  ▼
┌───────────────────────────────────────────────────────────────────────────┐
│                    STEP 3: QAP (Polynomial Conversion)                    │
│                                                                           │
│   R1CS Matrices → Polynomials (Lagrange Interpolation)                  │
│                                                                           │
│   For each variable i:                                                    │
│   ┌─────────────────────────────────────────────────────────────────┐   │
│   │  Aᵢ(x): polynomial through (1,A[0][i]), (2,A[1][i]), (3,A[2][i])│   │
│   │  Bᵢ(x): polynomial through (1,B[0][i]), (2,B[1][i]), (3,B[2][i])│   │
│   │  Cᵢ(x): polynomial through (1,C[0][i]), (2,C[1][i]), (3,C[2][i])│   │
│   └─────────────────────────────────────────────────────────────────┘   │
│                                                                           │
│   Target polynomial:                                                      │
│   ┌─────────────────────────────────────────────────────────────────┐   │
│   │  Z(x) = (x-1)(x-2)(x-3)                                         │   │
│   │  Z(1) = 0, Z(2) = 0, Z(3) = 0                                  │   │
│   └─────────────────────────────────────────────────────────────────┘   │
│                                                                           │
│   Key Property:                                                           │
│   ┌─────────────────────────────────────────────────────────────────┐   │
│   │  A(x)·B(x) - C(x) = H(x)·Z(x)                                  │   │
│   │  (divisibility check proves constraint satisfaction)            │   │
│   └─────────────────────────────────────────────────────────────────┘   │
└─────────────────────────────────┬─────────────────────────────────────────┘
                                  │
                                  ▼
┌───────────────────────────────────────────────────────────────────────────┐
│                      STEP 4: TRUSTED SETUP                                │
│                                                                           │
│   Generate Random "Toxic Waste":                                         │
│   ┌─────────────────────────────────────────────────────────────────┐   │
│   │  τ (tau)    - random evaluation point                           │   │
│   │  α (alpha)  - random blinding factor                            │   │
│   │  β (beta)   - random blinding factor                            │   │
│   │  γ (gamma)  - random blinding factor                            │   │
│   │  δ (delta)  - random blinding factor                            │   │
│   └─────────────────────────────────────────────────────────────────┘   │
│                                                                           │
│   Create Keys:                                                            │
│   ┌──────────────────────┐       ┌──────────────────────┐               │
│   │   PROVING KEY        │       │  VERIFICATION KEY    │               │
│   │   ──────────────     │       │  ────────────────    │               │
│   │  • A queries         │       │  • α, β, γ, δ       │               │
│   │  • B queries         │       │  • IC values        │               │
│   │  • C queries         │       │  • (subset of PK)   │               │
│   │  • α, β, δ points   │       └──────────────────────┘               │
│   └──────────────────────┘                                               │
│                                                                           │
│   ⚠️  CRITICAL: Destroy τ, α, β, γ, δ after setup! ⚠️                 │
└─────────────────────────────────┬─────────────────────────────────────────┘
                                  │
                ┌─────────────────┴─────────────────┐
                │                                   │
                ▼                                   ▼
┌───────────────────────────────┐   ┌───────────────────────────────────────┐
│      PROVER                   │   │         VERIFIER                      │
│      ──────                   │   │         ────────                      │
│                               │   │                                       │
│  Has:                         │   │  Has:                                 │
│  • Witness (including x=3)    │   │  • Public inputs (out=35)            │
│  • Proving key                │   │  • Verification key                   │
│  • Public inputs              │   │  • Proof from prover                  │
│                               │   │                                       │
│  Knows: x = 3 (SECRET!)       │   │  Does NOT know: x (HIDDEN!)          │
│                               │   │                                       │
└───────────────┬───────────────┘   └────────────────┬──────────────────────┘
                │                                    │
                ▼                                    │
┌───────────────────────────────────────────────────┐│
│        STEP 5: PROOF GENERATION                   ││
│                                                   ││
│  Prover computes:                                 ││
│  ┌──────────────────────────────────────────┐    ││
│  │  A = Σᵢ wᵢ·[Aᵢ(τ)]₁ + r·α                │    ││
│  │  B = Σᵢ wᵢ·[Bᵢ(τ)]₂ + s·β                │    ││
│  │  C = Σᵢ wᵢ·[Cᵢ(τ)]₁ + r·s·δ              │    ││
│  └──────────────────────────────────────────┘    ││
│                                                   ││
│  Where:                                           ││
│  • wᵢ = witness values                            ││
│  • r, s = random blinding factors                 ││
│  • [X]₁ = encrypted EC point                      ││
│                                                   ││
│  Output: Proof = (A, B, C)                        ││
│  Size: 3 elliptic curve points (~96 bytes)        ││
└───────────────────┬───────────────────────────────┘│
                    │                                │
                    │    Send Proof                  │
                    └────────────────────────────────┘
                                     │
                                     ▼
              ┌──────────────────────────────────────────────────┐
              │      STEP 6: VERIFICATION                        │
              │                                                  │
              │  Verifier checks pairing equation:               │
              │  ┌──────────────────────────────────────────┐   │
              │  │  e(A, B) = e(α,β)·e(vk_x,γ)·e(C,δ)      │   │
              │  └──────────────────────────────────────────┘   │
              │                                                  │
              │  Where:                                          │
              │  • e(·,·) = bilinear pairing                    │
              │  • vk_x computed from public inputs             │
              │                                                  │
              │  If equation holds:                              │
              │  ┌──────────────────────────────────────────┐   │
              │  │  ✓ Prover knows valid witness            │   │
              │  │  ✓ Computation is correct                │   │
              │  │  ✗ Learned NOTHING about x!              │   │
              │  └──────────────────────────────────────────┘   │
              └──────────────────────────────────────────────────┘

╔═══════════════════════════════════════════════════════════════════════════╗
║                          SECURITY GUARANTEES                              ║
╚═══════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────┐
│  COMPLETENESS                                                            │
│  ────────────                                                            │
│  If prover has valid witness → verification ALWAYS succeeds              │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│  SOUNDNESS                                                               │
│  ─────────                                                               │
│  If prover lacks valid witness → verification fails with probability    │
│  ≥ 1 - 1/|F| (overwhelmingly likely)                                    │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│  ZERO-KNOWLEDGE                                                          │
│  ──────────────                                                          │
│  Verifier learns NOTHING except statement is true                        │
│  No information leaked about witness values                              │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│  SUCCINCTNESS                                                            │
│  ────────────                                                            │
│  Proof size: O(1) - constant ~96 bytes                                  │
│  Verification: O(1) - constant time                                      │
└─────────────────────────────────────────────────────────────────────────┘

╔═══════════════════════════════════════════════════════════════════════════╗
║                           KEY INSIGHTS                                    ║
╚═══════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────┐
│  💡 Schwartz-Zippel Lemma                                               │
│  ────────────────────────────────────────────────────────────────────── │
│  Two different polynomials P(x) ≠ Q(x) of degree d can agree at most   │
│  d points. Checking at random τ is sufficient!                          │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│  💡 Homomorphic Hiding                                                  │
│  ────────────────────────────────────────────────────────────────────── │
│  EC points "encrypt" values: Can compute on encrypted data without      │
│  decrypting! [a]₁ + [b]₁ = [a+b]₁, but cannot extract 'a' from [a]₁   │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│  💡 Pairing Magic                                                       │
│  ────────────────────────────────────────────────────────────────────── │
│  Bilinear pairing: e([a]₁,[b]₂) = e([c]₁,[d]₂) checks if a·b = c·d    │
│  WITHOUT revealing a, b, c, d!                                          │
└─────────────────────────────────────────────────────────────────────────┘

╔═══════════════════════════════════════════════════════════════════════════╗
║                        FILE STRUCTURE                                     ║
╚═══════════════════════════════════════════════════════════════════════════╝

zkSNARKs_simplified/
│
├── Core Implementation (Header Files)
│   ├── field.h              ─→ Finite field arithmetic
│   ├── elliptic_curve.h     ─→ EC points and operations
│   ├── r1cs.h               ─→ Constraint system
│   ├── qap.h                ─→ Polynomial conversion
│   └── zksnark.h            ─→ Main protocol (Setup/Prove/Verify)
│
├── Examples
│   ├── simple_example.cpp   ─→ Demo: x² = 9
│   └── main.cpp             ─→ Demo: x³ + x + 5 = 35
│
├── Documentation
│   ├── README.md                      ─→ Quick start
│   ├── TECHNICAL_DOCUMENTATION.md     ─→ Theory and math
│   ├── PROJECT_SUMMARY.md             ─→ Complete overview
│   ├── CODE_OVERVIEW.cpp              ─→ Architecture guide
│   └── VISUAL_DIAGRAMS.txt            ─→ This file!
│
└── Scripts
    └── build_and_run.ps1    ─→ Automated build script

╔═══════════════════════════════════════════════════════════════════════════╗
║                         HAPPY LEARNING! 🚀                                ║
╚═══════════════════════════════════════════════════════════════════════════╝
